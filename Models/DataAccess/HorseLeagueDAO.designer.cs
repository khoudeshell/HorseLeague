#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HorseLeague.Models.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="HRLeague")]
	public partial class HorseLeagueDAODataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserDue(UserDue instance);
    partial void UpdateUserDue(UserDue instance);
    partial void DeleteUserDue(UserDue instance);
    partial void InsertLeagueRace(LeagueRace instance);
    partial void UpdateLeagueRace(LeagueRace instance);
    partial void DeleteLeagueRace(LeagueRace instance);
    partial void InsertRace(Race instance);
    partial void UpdateRace(Race instance);
    partial void DeleteRace(Race instance);
    partial void InsertRaceDetail(RaceDetail instance);
    partial void UpdateRaceDetail(RaceDetail instance);
    partial void DeleteRaceDetail(RaceDetail instance);
    partial void InsertUserRaceDetail(UserRaceDetail instance);
    partial void UpdateUserRaceDetail(UserRaceDetail instance);
    partial void DeleteUserRaceDetail(UserRaceDetail instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertRaceDetailPayout(RaceDetailPayout instance);
    partial void UpdateRaceDetailPayout(RaceDetailPayout instance);
    partial void DeleteRaceDetailPayout(RaceDetailPayout instance);
    partial void InsertHorse(Horse instance);
    partial void UpdateHorse(Horse instance);
    partial void DeleteHorse(Horse instance);
    partial void InsertReportLeagueRaceBet(ReportLeagueRaceBet instance);
    partial void UpdateReportLeagueRaceBet(ReportLeagueRaceBet instance);
    partial void DeleteReportLeagueRaceBet(ReportLeagueRaceBet instance);
    partial void InsertUserStanding(UserStanding instance);
    partial void UpdateUserStanding(UserStanding instance);
    partial void DeleteUserStanding(UserStanding instance);
    #endregion
		
		public HorseLeagueDAODataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HRLeagueConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HorseLeagueDAODataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HorseLeagueDAODataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HorseLeagueDAODataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HorseLeagueDAODataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserDue> UserDues
		{
			get
			{
				return this.GetTable<UserDue>();
			}
		}
		
		public System.Data.Linq.Table<LeagueRace> LeagueRaces
		{
			get
			{
				return this.GetTable<LeagueRace>();
			}
		}
		
		public System.Data.Linq.Table<Race> Races
		{
			get
			{
				return this.GetTable<Race>();
			}
		}
		
		public System.Data.Linq.Table<RaceDetail> RaceDetails
		{
			get
			{
				return this.GetTable<RaceDetail>();
			}
		}
		
		public System.Data.Linq.Table<UserRaceDetail> UserRaceDetails
		{
			get
			{
				return this.GetTable<UserRaceDetail>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<RaceDetailPayout> RaceDetailPayouts
		{
			get
			{
				return this.GetTable<RaceDetailPayout>();
			}
		}
		
		public System.Data.Linq.Table<Horse> Horses
		{
			get
			{
				return this.GetTable<Horse>();
			}
		}
		
		public System.Data.Linq.Table<ReportLeagueRaceBet> ReportLeagueRaceBets
		{
			get
			{
				return this.GetTable<ReportLeagueRaceBet>();
			}
		}
		
		public System.Data.Linq.Table<UserStanding> UserStandings
		{
			get
			{
				return this.GetTable<UserStanding>();
			}
		}
	}
	
	[Table(Name="dbo.UserDue")]
	public partial class UserDue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private int _Yr;
		
		private char _HasPaid;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnYrChanging(int value);
    partial void OnYrChanged();
    partial void OnHasPaidChanging(char value);
    partial void OnHasPaidChanged();
    #endregion
		
		public UserDue()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Yr", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Yr
		{
			get
			{
				return this._Yr;
			}
			set
			{
				if ((this._Yr != value))
				{
					this.OnYrChanging(value);
					this.SendPropertyChanging();
					this._Yr = value;
					this.SendPropertyChanged("Yr");
					this.OnYrChanged();
				}
			}
		}
		
		[Column(Storage="_HasPaid", DbType="Char(1) NOT NULL")]
		public char HasPaid
		{
			get
			{
				return this._HasPaid;
			}
			set
			{
				if ((this._HasPaid != value))
				{
					this.OnHasPaidChanging(value);
					this.SendPropertyChanging();
					this._HasPaid = value;
					this.SendPropertyChanged("HasPaid");
					this.OnHasPaidChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_UserDue", Storage="_aspnet_User", ThisKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.UserDues.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.UserDues.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LeagueRace")]
	public partial class LeagueRace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RaceId;
		
		private System.DateTime _Dt;
		
		private int _Weight;
		
		private System.Nullable<System.DateTime> _PostTime;
		
		private int _IsActive;
		
		private string _FormUrl;
		
		private EntitySet<RaceDetail> _RaceDetails;
		
		private EntitySet<UserRaceDetail> _UserRaceDetails;
		
		private EntitySet<RaceDetailPayout> _RaceDetailPayouts;
		
		private EntityRef<Race> _Race;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRaceIdChanging(int value);
    partial void OnRaceIdChanged();
    partial void OnDtChanging(System.DateTime value);
    partial void OnDtChanged();
    partial void OnWeightChanging(int value);
    partial void OnWeightChanged();
    partial void OnPostTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPostTimeChanged();
    partial void OnIsActiveChanging(int value);
    partial void OnIsActiveChanged();
    partial void OnFormUrlChanging(string value);
    partial void OnFormUrlChanged();
    #endregion
		
		public LeagueRace()
		{
			this._RaceDetails = new EntitySet<RaceDetail>(new Action<RaceDetail>(this.attach_RaceDetails), new Action<RaceDetail>(this.detach_RaceDetails));
			this._UserRaceDetails = new EntitySet<UserRaceDetail>(new Action<UserRaceDetail>(this.attach_UserRaceDetails), new Action<UserRaceDetail>(this.detach_UserRaceDetails));
			this._RaceDetailPayouts = new EntitySet<RaceDetailPayout>(new Action<RaceDetailPayout>(this.attach_RaceDetailPayouts), new Action<RaceDetailPayout>(this.detach_RaceDetailPayouts));
			this._Race = default(EntityRef<Race>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_RaceId", DbType="Int NOT NULL")]
		public int RaceId
		{
			get
			{
				return this._RaceId;
			}
			set
			{
				if ((this._RaceId != value))
				{
					if (this._Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceIdChanging(value);
					this.SendPropertyChanging();
					this._RaceId = value;
					this.SendPropertyChanged("RaceId");
					this.OnRaceIdChanged();
				}
			}
		}
		
		[Column(Storage="_Dt", DbType="DateTime NOT NULL")]
		public System.DateTime Dt
		{
			get
			{
				return this._Dt;
			}
			set
			{
				if ((this._Dt != value))
				{
					this.OnDtChanging(value);
					this.SendPropertyChanging();
					this._Dt = value;
					this.SendPropertyChanged("Dt");
					this.OnDtChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Int NOT NULL")]
		public int Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_PostTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> PostTime
		{
			get
			{
				return this._PostTime;
			}
			set
			{
				if ((this._PostTime != value))
				{
					this.OnPostTimeChanging(value);
					this.SendPropertyChanging();
					this._PostTime = value;
					this.SendPropertyChanged("PostTime");
					this.OnPostTimeChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Int NOT NULL")]
		public int IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_FormUrl", DbType="VarChar(500)")]
		public string FormUrl
		{
			get
			{
				return this._FormUrl;
			}
			set
			{
				if ((this._FormUrl != value))
				{
					this.OnFormUrlChanging(value);
					this.SendPropertyChanging();
					this._FormUrl = value;
					this.SendPropertyChanged("FormUrl");
					this.OnFormUrlChanged();
				}
			}
		}
		
		[Association(Name="LeagueRace_RaceDetail", Storage="_RaceDetails", OtherKey="LeagueRaceId")]
		public EntitySet<RaceDetail> RaceDetails
		{
			get
			{
				return this._RaceDetails;
			}
			set
			{
				this._RaceDetails.Assign(value);
			}
		}
		
		[Association(Name="LeagueRace_UserRaceDetail", Storage="_UserRaceDetails", OtherKey="LeagueRaceId")]
		public EntitySet<UserRaceDetail> UserRaceDetails
		{
			get
			{
				return this._UserRaceDetails;
			}
			set
			{
				this._UserRaceDetails.Assign(value);
			}
		}
		
		[Association(Name="LeagueRace_RaceDetailPayout", Storage="_RaceDetailPayouts", OtherKey="LeagueRaceId")]
		public EntitySet<RaceDetailPayout> RaceDetailPayouts
		{
			get
			{
				return this._RaceDetailPayouts;
			}
			set
			{
				this._RaceDetailPayouts.Assign(value);
			}
		}
		
		[Association(Name="Race_LeagueRace", Storage="_Race", ThisKey="RaceId", IsForeignKey=true)]
		public Race Race
		{
			get
			{
				return this._Race.Entity;
			}
			set
			{
				Race previousValue = this._Race.Entity;
				if (((previousValue != value) 
							|| (this._Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Race.Entity = null;
						previousValue.LeagueRaces.Remove(this);
					}
					this._Race.Entity = value;
					if ((value != null))
					{
						value.LeagueRaces.Add(this);
						this._RaceId = value.Id;
					}
					else
					{
						this._RaceId = default(int);
					}
					this.SendPropertyChanged("Race");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RaceDetails(RaceDetail entity)
		{
			this.SendPropertyChanging();
			entity.LeagueRace = this;
		}
		
		private void detach_RaceDetails(RaceDetail entity)
		{
			this.SendPropertyChanging();
			entity.LeagueRace = null;
		}
		
		private void attach_UserRaceDetails(UserRaceDetail entity)
		{
			this.SendPropertyChanging();
			entity.LeagueRace = this;
		}
		
		private void detach_UserRaceDetails(UserRaceDetail entity)
		{
			this.SendPropertyChanging();
			entity.LeagueRace = null;
		}
		
		private void attach_RaceDetailPayouts(RaceDetailPayout entity)
		{
			this.SendPropertyChanging();
			entity.LeagueRace = this;
		}
		
		private void detach_RaceDetailPayouts(RaceDetailPayout entity)
		{
			this.SendPropertyChanging();
			entity.LeagueRace = null;
		}
	}
	
	[Table(Name="dbo.Race")]
	public partial class Race : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Track;
		
		private EntitySet<LeagueRace> _LeagueRaces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTrackChanging(string value);
    partial void OnTrackChanged();
    #endregion
		
		public Race()
		{
			this._LeagueRaces = new EntitySet<LeagueRace>(new Action<LeagueRace>(this.attach_LeagueRaces), new Action<LeagueRace>(this.detach_LeagueRaces));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Track", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Track
		{
			get
			{
				return this._Track;
			}
			set
			{
				if ((this._Track != value))
				{
					this.OnTrackChanging(value);
					this.SendPropertyChanging();
					this._Track = value;
					this.SendPropertyChanged("Track");
					this.OnTrackChanged();
				}
			}
		}
		
		[Association(Name="Race_LeagueRace", Storage="_LeagueRaces", OtherKey="RaceId")]
		public EntitySet<LeagueRace> LeagueRaces
		{
			get
			{
				return this._LeagueRaces;
			}
			set
			{
				this._LeagueRaces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LeagueRaces(LeagueRace entity)
		{
			this.SendPropertyChanging();
			entity.Race = this;
		}
		
		private void detach_LeagueRaces(LeagueRace entity)
		{
			this.SendPropertyChanging();
			entity.Race = null;
		}
	}
	
	[Table(Name="dbo.RaceDetails")]
	public partial class RaceDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RaceDetailId;
		
		private int _LeagueRaceId;
		
		private int _HorseId;
		
		private int _PostPosition;
		
		private int _IsScratched;
		
		private int _OddsOrder;
		
		private EntitySet<UserRaceDetail> _UserRaceDetails;
		
		private EntityRef<RaceDetailPayout> _RaceDetailPayout;
		
		private EntitySet<ReportLeagueRaceBet> _ReportLeagueRaceBets;
		
		private EntityRef<LeagueRace> _LeagueRace;
		
		private EntityRef<Horse> _Horse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRaceDetailIdChanging(int value);
    partial void OnRaceDetailIdChanged();
    partial void OnLeagueRaceIdChanging(int value);
    partial void OnLeagueRaceIdChanged();
    partial void OnHorseIdChanging(int value);
    partial void OnHorseIdChanged();
    partial void OnPostPositionChanging(int value);
    partial void OnPostPositionChanged();
    partial void OnIsScratchedChanging(int value);
    partial void OnIsScratchedChanged();
    partial void OnOddsOrderChanging(int value);
    partial void OnOddsOrderChanged();
    #endregion
		
		public RaceDetail()
		{
			this._UserRaceDetails = new EntitySet<UserRaceDetail>(new Action<UserRaceDetail>(this.attach_UserRaceDetails), new Action<UserRaceDetail>(this.detach_UserRaceDetails));
			this._RaceDetailPayout = default(EntityRef<RaceDetailPayout>);
			this._ReportLeagueRaceBets = new EntitySet<ReportLeagueRaceBet>(new Action<ReportLeagueRaceBet>(this.attach_ReportLeagueRaceBets), new Action<ReportLeagueRaceBet>(this.detach_ReportLeagueRaceBets));
			this._LeagueRace = default(EntityRef<LeagueRace>);
			this._Horse = default(EntityRef<Horse>);
			OnCreated();
		}
		
		[Column(Storage="_RaceDetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RaceDetailId
		{
			get
			{
				return this._RaceDetailId;
			}
			set
			{
				if ((this._RaceDetailId != value))
				{
					this.OnRaceDetailIdChanging(value);
					this.SendPropertyChanging();
					this._RaceDetailId = value;
					this.SendPropertyChanged("RaceDetailId");
					this.OnRaceDetailIdChanged();
				}
			}
		}
		
		[Column(Storage="_LeagueRaceId", DbType="Int NOT NULL")]
		public int LeagueRaceId
		{
			get
			{
				return this._LeagueRaceId;
			}
			set
			{
				if ((this._LeagueRaceId != value))
				{
					if (this._LeagueRace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueRaceIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueRaceId = value;
					this.SendPropertyChanged("LeagueRaceId");
					this.OnLeagueRaceIdChanged();
				}
			}
		}
		
		[Column(Storage="_HorseId", DbType="Int NOT NULL")]
		public int HorseId
		{
			get
			{
				return this._HorseId;
			}
			set
			{
				if ((this._HorseId != value))
				{
					if (this._Horse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHorseIdChanging(value);
					this.SendPropertyChanging();
					this._HorseId = value;
					this.SendPropertyChanged("HorseId");
					this.OnHorseIdChanged();
				}
			}
		}
		
		[Column(Storage="_PostPosition", DbType="Int NOT NULL")]
		public int PostPosition
		{
			get
			{
				return this._PostPosition;
			}
			set
			{
				if ((this._PostPosition != value))
				{
					this.OnPostPositionChanging(value);
					this.SendPropertyChanging();
					this._PostPosition = value;
					this.SendPropertyChanged("PostPosition");
					this.OnPostPositionChanged();
				}
			}
		}
		
		[Column(Storage="_IsScratched", DbType="Int NOT NULL")]
		public int IsScratched
		{
			get
			{
				return this._IsScratched;
			}
			set
			{
				if ((this._IsScratched != value))
				{
					this.OnIsScratchedChanging(value);
					this.SendPropertyChanging();
					this._IsScratched = value;
					this.SendPropertyChanged("IsScratched");
					this.OnIsScratchedChanged();
				}
			}
		}
		
		[Column(Storage="_OddsOrder", DbType="Int NOT NULL")]
		public int OddsOrder
		{
			get
			{
				return this._OddsOrder;
			}
			set
			{
				if ((this._OddsOrder != value))
				{
					this.OnOddsOrderChanging(value);
					this.SendPropertyChanging();
					this._OddsOrder = value;
					this.SendPropertyChanged("OddsOrder");
					this.OnOddsOrderChanged();
				}
			}
		}
		
		[Association(Name="RaceDetail_UserRaceDetail", Storage="_UserRaceDetails", OtherKey="RaceDetailId")]
		public EntitySet<UserRaceDetail> UserRaceDetails
		{
			get
			{
				return this._UserRaceDetails;
			}
			set
			{
				this._UserRaceDetails.Assign(value);
			}
		}
		
		[Association(Name="RaceDetail_RaceDetailPayout", Storage="_RaceDetailPayout", ThisKey="RaceDetailId", IsUnique=true, IsForeignKey=false)]
		public RaceDetailPayout RaceDetailPayout
		{
			get
			{
				return this._RaceDetailPayout.Entity;
			}
			set
			{
				RaceDetailPayout previousValue = this._RaceDetailPayout.Entity;
				if (((previousValue != value) 
							|| (this._RaceDetailPayout.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RaceDetailPayout.Entity = null;
						previousValue.RaceDetail = null;
					}
					this._RaceDetailPayout.Entity = value;
					if ((value != null))
					{
						value.RaceDetail = this;
					}
					this.SendPropertyChanged("RaceDetailPayout");
				}
			}
		}
		
		[Association(Name="RaceDetail_ReportLeagueRaceBet", Storage="_ReportLeagueRaceBets", OtherKey="RaceDetailId")]
		public EntitySet<ReportLeagueRaceBet> ReportLeagueRaceBets
		{
			get
			{
				return this._ReportLeagueRaceBets;
			}
			set
			{
				this._ReportLeagueRaceBets.Assign(value);
			}
		}
		
		[Association(Name="LeagueRace_RaceDetail", Storage="_LeagueRace", ThisKey="LeagueRaceId", IsForeignKey=true)]
		public LeagueRace LeagueRace
		{
			get
			{
				return this._LeagueRace.Entity;
			}
			set
			{
				LeagueRace previousValue = this._LeagueRace.Entity;
				if (((previousValue != value) 
							|| (this._LeagueRace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueRace.Entity = null;
						previousValue.RaceDetails.Remove(this);
					}
					this._LeagueRace.Entity = value;
					if ((value != null))
					{
						value.RaceDetails.Add(this);
						this._LeagueRaceId = value.Id;
					}
					else
					{
						this._LeagueRaceId = default(int);
					}
					this.SendPropertyChanged("LeagueRace");
				}
			}
		}
		
		[Association(Name="Horse_RaceDetail", Storage="_Horse", ThisKey="HorseId", IsForeignKey=true)]
		public Horse Horse
		{
			get
			{
				return this._Horse.Entity;
			}
			set
			{
				Horse previousValue = this._Horse.Entity;
				if (((previousValue != value) 
							|| (this._Horse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Horse.Entity = null;
						previousValue.RaceDetails.Remove(this);
					}
					this._Horse.Entity = value;
					if ((value != null))
					{
						value.RaceDetails.Add(this);
						this._HorseId = value.Id;
					}
					else
					{
						this._HorseId = default(int);
					}
					this.SendPropertyChanged("Horse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRaceDetails(UserRaceDetail entity)
		{
			this.SendPropertyChanging();
			entity.RaceDetail = this;
		}
		
		private void detach_UserRaceDetails(UserRaceDetail entity)
		{
			this.SendPropertyChanging();
			entity.RaceDetail = null;
		}
		
		private void attach_ReportLeagueRaceBets(ReportLeagueRaceBet entity)
		{
			this.SendPropertyChanging();
			entity.RaceDetail = this;
		}
		
		private void detach_ReportLeagueRaceBets(ReportLeagueRaceBet entity)
		{
			this.SendPropertyChanging();
			entity.RaceDetail = null;
		}
	}
	
	[Table(Name="dbo.UserRaceDetail")]
	public partial class UserRaceDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RaceDetailId;
		
		private int _LeagueRaceId;
		
		private System.Guid _UserId;
		
		private int _BetType;
		
		private System.DateTime _UpdateDate;
		
		private EntityRef<LeagueRace> _LeagueRace;
		
		private EntityRef<RaceDetail> _RaceDetail;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRaceDetailIdChanging(int value);
    partial void OnRaceDetailIdChanged();
    partial void OnLeagueRaceIdChanging(int value);
    partial void OnLeagueRaceIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnBetTypeChanging(int value);
    partial void OnBetTypeChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    #endregion
		
		public UserRaceDetail()
		{
			this._LeagueRace = default(EntityRef<LeagueRace>);
			this._RaceDetail = default(EntityRef<RaceDetail>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_RaceDetailId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RaceDetailId
		{
			get
			{
				return this._RaceDetailId;
			}
			set
			{
				if ((this._RaceDetailId != value))
				{
					if (this._RaceDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceDetailIdChanging(value);
					this.SendPropertyChanging();
					this._RaceDetailId = value;
					this.SendPropertyChanged("RaceDetailId");
					this.OnRaceDetailIdChanged();
				}
			}
		}
		
		[Column(Storage="_LeagueRaceId", DbType="Int NOT NULL")]
		public int LeagueRaceId
		{
			get
			{
				return this._LeagueRaceId;
			}
			set
			{
				if ((this._LeagueRaceId != value))
				{
					if (this._LeagueRace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueRaceIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueRaceId = value;
					this.SendPropertyChanged("LeagueRaceId");
					this.OnLeagueRaceIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_BetType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BetType
		{
			get
			{
				return this._BetType;
			}
			set
			{
				if ((this._BetType != value))
				{
					this.OnBetTypeChanging(value);
					this.SendPropertyChanging();
					this._BetType = value;
					this.SendPropertyChanged("BetType");
					this.OnBetTypeChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[Association(Name="LeagueRace_UserRaceDetail", Storage="_LeagueRace", ThisKey="LeagueRaceId", IsForeignKey=true)]
		public LeagueRace LeagueRace
		{
			get
			{
				return this._LeagueRace.Entity;
			}
			set
			{
				LeagueRace previousValue = this._LeagueRace.Entity;
				if (((previousValue != value) 
							|| (this._LeagueRace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueRace.Entity = null;
						previousValue.UserRaceDetails.Remove(this);
					}
					this._LeagueRace.Entity = value;
					if ((value != null))
					{
						value.UserRaceDetails.Add(this);
						this._LeagueRaceId = value.Id;
					}
					else
					{
						this._LeagueRaceId = default(int);
					}
					this.SendPropertyChanged("LeagueRace");
				}
			}
		}
		
		[Association(Name="RaceDetail_UserRaceDetail", Storage="_RaceDetail", ThisKey="RaceDetailId", IsForeignKey=true)]
		public RaceDetail RaceDetail
		{
			get
			{
				return this._RaceDetail.Entity;
			}
			set
			{
				RaceDetail previousValue = this._RaceDetail.Entity;
				if (((previousValue != value) 
							|| (this._RaceDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RaceDetail.Entity = null;
						previousValue.UserRaceDetails.Remove(this);
					}
					this._RaceDetail.Entity = value;
					if ((value != null))
					{
						value.UserRaceDetails.Add(this);
						this._RaceDetailId = value.RaceDetailId;
					}
					else
					{
						this._RaceDetailId = default(int);
					}
					this.SendPropertyChanged("RaceDetail");
				}
			}
		}
		
		[Association(Name="aspnet_User_UserRaceDetail", Storage="_aspnet_User", ThisKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.UserRaceDetails.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.UserRaceDetails.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntitySet<UserDue> _UserDues;
		
		private EntitySet<UserRaceDetail> _UserRaceDetails;
		
		private EntitySet<UserStanding> _UserStandings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._UserDues = new EntitySet<UserDue>(new Action<UserDue>(this.attach_UserDues), new Action<UserDue>(this.detach_UserDues));
			this._UserRaceDetails = new EntitySet<UserRaceDetail>(new Action<UserRaceDetail>(this.attach_UserRaceDetails), new Action<UserRaceDetail>(this.detach_UserRaceDetails));
			this._UserStandings = new EntitySet<UserStanding>(new Action<UserStanding>(this.attach_UserStandings), new Action<UserStanding>(this.detach_UserStandings));
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[Column(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_UserDue", Storage="_UserDues", OtherKey="UserId")]
		public EntitySet<UserDue> UserDues
		{
			get
			{
				return this._UserDues;
			}
			set
			{
				this._UserDues.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_UserRaceDetail", Storage="_UserRaceDetails", OtherKey="UserId")]
		public EntitySet<UserRaceDetail> UserRaceDetails
		{
			get
			{
				return this._UserRaceDetails;
			}
			set
			{
				this._UserRaceDetails.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_UserStanding", Storage="_UserStandings", OtherKey="UserId")]
		public EntitySet<UserStanding> UserStandings
		{
			get
			{
				return this._UserStandings;
			}
			set
			{
				this._UserStandings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserDues(UserDue entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_UserDues(UserDue entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_UserRaceDetails(UserRaceDetail entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_UserRaceDetails(UserRaceDetail entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_UserStandings(UserStanding entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_UserStandings(UserStanding entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
	
	[Table(Name="dbo.RaceDetailPayout")]
	public partial class RaceDetailPayout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RaceDetailId;
		
		private int _LeagueRaceId;
		
		private int _BetType;
		
		private System.Nullable<double> _WinAmount;
		
		private System.Nullable<double> _PlaceAmount;
		
		private System.Nullable<double> _ShowAmount;
		
		private EntityRef<LeagueRace> _LeagueRace;
		
		private EntityRef<RaceDetail> _RaceDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRaceDetailIdChanging(int value);
    partial void OnRaceDetailIdChanged();
    partial void OnLeagueRaceIdChanging(int value);
    partial void OnLeagueRaceIdChanged();
    partial void OnBetTypeChanging(int value);
    partial void OnBetTypeChanged();
    partial void OnWinAmountChanging(System.Nullable<double> value);
    partial void OnWinAmountChanged();
    partial void OnPlaceAmountChanging(System.Nullable<double> value);
    partial void OnPlaceAmountChanged();
    partial void OnShowAmountChanging(System.Nullable<double> value);
    partial void OnShowAmountChanged();
    #endregion
		
		public RaceDetailPayout()
		{
			this._LeagueRace = default(EntityRef<LeagueRace>);
			this._RaceDetail = default(EntityRef<RaceDetail>);
			OnCreated();
		}
		
		[Column(Storage="_RaceDetailId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RaceDetailId
		{
			get
			{
				return this._RaceDetailId;
			}
			set
			{
				if ((this._RaceDetailId != value))
				{
					if (this._RaceDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceDetailIdChanging(value);
					this.SendPropertyChanging();
					this._RaceDetailId = value;
					this.SendPropertyChanged("RaceDetailId");
					this.OnRaceDetailIdChanged();
				}
			}
		}
		
		[Column(Storage="_LeagueRaceId", DbType="Int NOT NULL")]
		public int LeagueRaceId
		{
			get
			{
				return this._LeagueRaceId;
			}
			set
			{
				if ((this._LeagueRaceId != value))
				{
					if (this._LeagueRace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueRaceIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueRaceId = value;
					this.SendPropertyChanged("LeagueRaceId");
					this.OnLeagueRaceIdChanged();
				}
			}
		}
		
		[Column(Storage="_BetType", DbType="Int NOT NULL")]
		public int BetType
		{
			get
			{
				return this._BetType;
			}
			set
			{
				if ((this._BetType != value))
				{
					this.OnBetTypeChanging(value);
					this.SendPropertyChanging();
					this._BetType = value;
					this.SendPropertyChanged("BetType");
					this.OnBetTypeChanged();
				}
			}
		}
		
		[Column(Storage="_WinAmount", DbType="Float")]
		public System.Nullable<double> WinAmount
		{
			get
			{
				return this._WinAmount;
			}
			set
			{
				if ((this._WinAmount != value))
				{
					this.OnWinAmountChanging(value);
					this.SendPropertyChanging();
					this._WinAmount = value;
					this.SendPropertyChanged("WinAmount");
					this.OnWinAmountChanged();
				}
			}
		}
		
		[Column(Storage="_PlaceAmount", DbType="Float")]
		public System.Nullable<double> PlaceAmount
		{
			get
			{
				return this._PlaceAmount;
			}
			set
			{
				if ((this._PlaceAmount != value))
				{
					this.OnPlaceAmountChanging(value);
					this.SendPropertyChanging();
					this._PlaceAmount = value;
					this.SendPropertyChanged("PlaceAmount");
					this.OnPlaceAmountChanged();
				}
			}
		}
		
		[Column(Storage="_ShowAmount", DbType="Float")]
		public System.Nullable<double> ShowAmount
		{
			get
			{
				return this._ShowAmount;
			}
			set
			{
				if ((this._ShowAmount != value))
				{
					this.OnShowAmountChanging(value);
					this.SendPropertyChanging();
					this._ShowAmount = value;
					this.SendPropertyChanged("ShowAmount");
					this.OnShowAmountChanged();
				}
			}
		}
		
		[Association(Name="LeagueRace_RaceDetailPayout", Storage="_LeagueRace", ThisKey="LeagueRaceId", IsForeignKey=true)]
		public LeagueRace LeagueRace
		{
			get
			{
				return this._LeagueRace.Entity;
			}
			set
			{
				LeagueRace previousValue = this._LeagueRace.Entity;
				if (((previousValue != value) 
							|| (this._LeagueRace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueRace.Entity = null;
						previousValue.RaceDetailPayouts.Remove(this);
					}
					this._LeagueRace.Entity = value;
					if ((value != null))
					{
						value.RaceDetailPayouts.Add(this);
						this._LeagueRaceId = value.Id;
					}
					else
					{
						this._LeagueRaceId = default(int);
					}
					this.SendPropertyChanged("LeagueRace");
				}
			}
		}
		
		[Association(Name="RaceDetail_RaceDetailPayout", Storage="_RaceDetail", ThisKey="RaceDetailId", IsForeignKey=true)]
		public RaceDetail RaceDetail
		{
			get
			{
				return this._RaceDetail.Entity;
			}
			set
			{
				RaceDetail previousValue = this._RaceDetail.Entity;
				if (((previousValue != value) 
							|| (this._RaceDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RaceDetail.Entity = null;
						previousValue.RaceDetailPayout = null;
					}
					this._RaceDetail.Entity = value;
					if ((value != null))
					{
						value.RaceDetailPayout = this;
						this._RaceDetailId = value.RaceDetailId;
					}
					else
					{
						this._RaceDetailId = default(int);
					}
					this.SendPropertyChanged("RaceDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Horse")]
	public partial class Horse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<RaceDetail> _RaceDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Horse()
		{
			this._RaceDetails = new EntitySet<RaceDetail>(new Action<RaceDetail>(this.attach_RaceDetails), new Action<RaceDetail>(this.detach_RaceDetails));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Horse_RaceDetail", Storage="_RaceDetails", OtherKey="HorseId")]
		public EntitySet<RaceDetail> RaceDetails
		{
			get
			{
				return this._RaceDetails;
			}
			set
			{
				this._RaceDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RaceDetails(RaceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Horse = this;
		}
		
		private void detach_RaceDetails(RaceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Horse = null;
		}
	}
	
	[Table(Name="dbo.ReportLeagueRaceBet")]
	public partial class ReportLeagueRaceBet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RaceDetailId;
		
		private int _BetType;
		
		private int _UserBetCount;
		
		private EntityRef<RaceDetail> _RaceDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRaceDetailIdChanging(int value);
    partial void OnRaceDetailIdChanged();
    partial void OnBetTypeChanging(int value);
    partial void OnBetTypeChanged();
    partial void OnUserBetCountChanging(int value);
    partial void OnUserBetCountChanged();
    #endregion
		
		public ReportLeagueRaceBet()
		{
			this._RaceDetail = default(EntityRef<RaceDetail>);
			OnCreated();
		}
		
		[Column(Storage="_RaceDetailId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RaceDetailId
		{
			get
			{
				return this._RaceDetailId;
			}
			set
			{
				if ((this._RaceDetailId != value))
				{
					if (this._RaceDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceDetailIdChanging(value);
					this.SendPropertyChanging();
					this._RaceDetailId = value;
					this.SendPropertyChanged("RaceDetailId");
					this.OnRaceDetailIdChanged();
				}
			}
		}
		
		[Column(Storage="_BetType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BetType
		{
			get
			{
				return this._BetType;
			}
			set
			{
				if ((this._BetType != value))
				{
					this.OnBetTypeChanging(value);
					this.SendPropertyChanging();
					this._BetType = value;
					this.SendPropertyChanged("BetType");
					this.OnBetTypeChanged();
				}
			}
		}
		
		[Column(Storage="_UserBetCount", DbType="Int NOT NULL")]
		public int UserBetCount
		{
			get
			{
				return this._UserBetCount;
			}
			set
			{
				if ((this._UserBetCount != value))
				{
					this.OnUserBetCountChanging(value);
					this.SendPropertyChanging();
					this._UserBetCount = value;
					this.SendPropertyChanged("UserBetCount");
					this.OnUserBetCountChanged();
				}
			}
		}
		
		[Association(Name="RaceDetail_ReportLeagueRaceBet", Storage="_RaceDetail", ThisKey="RaceDetailId", IsForeignKey=true)]
		public RaceDetail RaceDetail
		{
			get
			{
				return this._RaceDetail.Entity;
			}
			set
			{
				RaceDetail previousValue = this._RaceDetail.Entity;
				if (((previousValue != value) 
							|| (this._RaceDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RaceDetail.Entity = null;
						previousValue.ReportLeagueRaceBets.Remove(this);
					}
					this._RaceDetail.Entity = value;
					if ((value != null))
					{
						value.ReportLeagueRaceBets.Add(this);
						this._RaceDetailId = value.RaceDetailId;
					}
					else
					{
						this._RaceDetailId = default(int);
					}
					this.SendPropertyChanged("RaceDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserStandings")]
	public partial class UserStanding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _UserId;
		
		private System.DateTime _Yr;
		
		private double _Total;
		
		private System.DateTime _UpdateDate;
		
		private double _WinWinPct;
		
		private double _WinPlacePct;
		
		private double _WinShowPct;
		
		private double _PlacePlacePct;
		
		private double _PlaceShowPct;
		
		private double _ShowShowPct;
		
		private double _WinWinAvg;
		
		private double _WinPlaceAvg;
		
		private double _WinShowAvg;
		
		private double _PlacePlaceAvg;
		
		private double _PlaceShowAvg;
		
		private double _ShowShowAvg;
		
		private double _WinFavPct;
		
		private double _ROI;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnYrChanging(System.DateTime value);
    partial void OnYrChanged();
    partial void OnTotalChanging(double value);
    partial void OnTotalChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnWinWinPctChanging(double value);
    partial void OnWinWinPctChanged();
    partial void OnWinPlacePctChanging(double value);
    partial void OnWinPlacePctChanged();
    partial void OnWinShowPctChanging(double value);
    partial void OnWinShowPctChanged();
    partial void OnPlacePlacePctChanging(double value);
    partial void OnPlacePlacePctChanged();
    partial void OnPlaceShowPctChanging(double value);
    partial void OnPlaceShowPctChanged();
    partial void OnShowShowPctChanging(double value);
    partial void OnShowShowPctChanged();
    partial void OnWinWinAvgChanging(double value);
    partial void OnWinWinAvgChanged();
    partial void OnWinPlaceAvgChanging(double value);
    partial void OnWinPlaceAvgChanged();
    partial void OnWinShowAvgChanging(double value);
    partial void OnWinShowAvgChanged();
    partial void OnPlacePlaceAvgChanging(double value);
    partial void OnPlacePlaceAvgChanged();
    partial void OnPlaceShowAvgChanging(double value);
    partial void OnPlaceShowAvgChanged();
    partial void OnShowShowAvgChanging(double value);
    partial void OnShowShowAvgChanged();
    partial void OnWinFavPctChanging(double value);
    partial void OnWinFavPctChanged();
    partial void OnROIChanging(double value);
    partial void OnROIChanged();
    #endregion
		
		public UserStanding()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Yr", DbType="DateTime NOT NULL")]
		public System.DateTime Yr
		{
			get
			{
				return this._Yr;
			}
			set
			{
				if ((this._Yr != value))
				{
					this.OnYrChanging(value);
					this.SendPropertyChanging();
					this._Yr = value;
					this.SendPropertyChanged("Yr");
					this.OnYrChanged();
				}
			}
		}
		
		[Column(Storage="_Total", DbType="Float NOT NULL")]
		public double Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_WinWinPct", DbType="Float NOT NULL")]
		public double WinWinPct
		{
			get
			{
				return this._WinWinPct;
			}
			set
			{
				if ((this._WinWinPct != value))
				{
					this.OnWinWinPctChanging(value);
					this.SendPropertyChanging();
					this._WinWinPct = value;
					this.SendPropertyChanged("WinWinPct");
					this.OnWinWinPctChanged();
				}
			}
		}
		
		[Column(Storage="_WinPlacePct", DbType="Float NOT NULL")]
		public double WinPlacePct
		{
			get
			{
				return this._WinPlacePct;
			}
			set
			{
				if ((this._WinPlacePct != value))
				{
					this.OnWinPlacePctChanging(value);
					this.SendPropertyChanging();
					this._WinPlacePct = value;
					this.SendPropertyChanged("WinPlacePct");
					this.OnWinPlacePctChanged();
				}
			}
		}
		
		[Column(Storage="_WinShowPct", DbType="Float NOT NULL")]
		public double WinShowPct
		{
			get
			{
				return this._WinShowPct;
			}
			set
			{
				if ((this._WinShowPct != value))
				{
					this.OnWinShowPctChanging(value);
					this.SendPropertyChanging();
					this._WinShowPct = value;
					this.SendPropertyChanged("WinShowPct");
					this.OnWinShowPctChanged();
				}
			}
		}
		
		[Column(Storage="_PlacePlacePct", DbType="Float NOT NULL")]
		public double PlacePlacePct
		{
			get
			{
				return this._PlacePlacePct;
			}
			set
			{
				if ((this._PlacePlacePct != value))
				{
					this.OnPlacePlacePctChanging(value);
					this.SendPropertyChanging();
					this._PlacePlacePct = value;
					this.SendPropertyChanged("PlacePlacePct");
					this.OnPlacePlacePctChanged();
				}
			}
		}
		
		[Column(Storage="_PlaceShowPct", DbType="Float NOT NULL")]
		public double PlaceShowPct
		{
			get
			{
				return this._PlaceShowPct;
			}
			set
			{
				if ((this._PlaceShowPct != value))
				{
					this.OnPlaceShowPctChanging(value);
					this.SendPropertyChanging();
					this._PlaceShowPct = value;
					this.SendPropertyChanged("PlaceShowPct");
					this.OnPlaceShowPctChanged();
				}
			}
		}
		
		[Column(Storage="_ShowShowPct", DbType="Float NOT NULL")]
		public double ShowShowPct
		{
			get
			{
				return this._ShowShowPct;
			}
			set
			{
				if ((this._ShowShowPct != value))
				{
					this.OnShowShowPctChanging(value);
					this.SendPropertyChanging();
					this._ShowShowPct = value;
					this.SendPropertyChanged("ShowShowPct");
					this.OnShowShowPctChanged();
				}
			}
		}
		
		[Column(Storage="_WinWinAvg", DbType="Float NOT NULL")]
		public double WinWinAvg
		{
			get
			{
				return this._WinWinAvg;
			}
			set
			{
				if ((this._WinWinAvg != value))
				{
					this.OnWinWinAvgChanging(value);
					this.SendPropertyChanging();
					this._WinWinAvg = value;
					this.SendPropertyChanged("WinWinAvg");
					this.OnWinWinAvgChanged();
				}
			}
		}
		
		[Column(Storage="_WinPlaceAvg", DbType="Float NOT NULL")]
		public double WinPlaceAvg
		{
			get
			{
				return this._WinPlaceAvg;
			}
			set
			{
				if ((this._WinPlaceAvg != value))
				{
					this.OnWinPlaceAvgChanging(value);
					this.SendPropertyChanging();
					this._WinPlaceAvg = value;
					this.SendPropertyChanged("WinPlaceAvg");
					this.OnWinPlaceAvgChanged();
				}
			}
		}
		
		[Column(Storage="_WinShowAvg", DbType="Float NOT NULL")]
		public double WinShowAvg
		{
			get
			{
				return this._WinShowAvg;
			}
			set
			{
				if ((this._WinShowAvg != value))
				{
					this.OnWinShowAvgChanging(value);
					this.SendPropertyChanging();
					this._WinShowAvg = value;
					this.SendPropertyChanged("WinShowAvg");
					this.OnWinShowAvgChanged();
				}
			}
		}
		
		[Column(Storage="_PlacePlaceAvg", DbType="Float NOT NULL")]
		public double PlacePlaceAvg
		{
			get
			{
				return this._PlacePlaceAvg;
			}
			set
			{
				if ((this._PlacePlaceAvg != value))
				{
					this.OnPlacePlaceAvgChanging(value);
					this.SendPropertyChanging();
					this._PlacePlaceAvg = value;
					this.SendPropertyChanged("PlacePlaceAvg");
					this.OnPlacePlaceAvgChanged();
				}
			}
		}
		
		[Column(Storage="_PlaceShowAvg", DbType="Float NOT NULL")]
		public double PlaceShowAvg
		{
			get
			{
				return this._PlaceShowAvg;
			}
			set
			{
				if ((this._PlaceShowAvg != value))
				{
					this.OnPlaceShowAvgChanging(value);
					this.SendPropertyChanging();
					this._PlaceShowAvg = value;
					this.SendPropertyChanged("PlaceShowAvg");
					this.OnPlaceShowAvgChanged();
				}
			}
		}
		
		[Column(Storage="_ShowShowAvg", DbType="Float NOT NULL")]
		public double ShowShowAvg
		{
			get
			{
				return this._ShowShowAvg;
			}
			set
			{
				if ((this._ShowShowAvg != value))
				{
					this.OnShowShowAvgChanging(value);
					this.SendPropertyChanging();
					this._ShowShowAvg = value;
					this.SendPropertyChanged("ShowShowAvg");
					this.OnShowShowAvgChanged();
				}
			}
		}
		
		[Column(Storage="_WinFavPct", DbType="Float NOT NULL")]
		public double WinFavPct
		{
			get
			{
				return this._WinFavPct;
			}
			set
			{
				if ((this._WinFavPct != value))
				{
					this.OnWinFavPctChanging(value);
					this.SendPropertyChanging();
					this._WinFavPct = value;
					this.SendPropertyChanged("WinFavPct");
					this.OnWinFavPctChanged();
				}
			}
		}
		
		[Column(Storage="_ROI", DbType="Float NOT NULL")]
		public double ROI
		{
			get
			{
				return this._ROI;
			}
			set
			{
				if ((this._ROI != value))
				{
					this.OnROIChanging(value);
					this.SendPropertyChanging();
					this._ROI = value;
					this.SendPropertyChanged("ROI");
					this.OnROIChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_UserStanding", Storage="_aspnet_User", ThisKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.UserStandings.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.UserStandings.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
